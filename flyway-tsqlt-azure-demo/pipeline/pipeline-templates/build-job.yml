# Parameters should be specified by the parent YAML that consumes this template
parameters:
  deployScript: 'flyway.ps1'
  setupCLRscript: 'pipeline/ps/01-setup-clr.ps1'
  installTSQLtScript: 'pipeline/ps/02-install-tsqlt.ps1'
  createTestsScript: 'pipeline/ps/03-create-tests.ps1'
  runTestsScript: 'pipeline/ps/04-run-tests.ps1'
  createReportScript: 'pipeline/ps/05-create-report.ps1'

  databaseName: 'PleaseProvideThroughTheParentYAML'
  environmentName: 'PleaseProvideThroughTheParentYAML'
  deployPool: 'PleaseProvideThroughTheParentYAML'

jobs:
  - job: IntegrationJob
    displayName: 'Integrating on ${{parameters.environmentName}} DB'
    pool:
      name: ${{parameters.deployPool}}
    steps:
      - task: PowerShell@2
        displayName: 'CI build on ${{parameters.environmentName}} DB. Appplying Migrations...'
        inputs:
          targetType: filePath
          filePath: ${{parameters.deployScript}}
          arguments: -databaseName ${{parameters.databaseName}} -environmentName ${{parameters.environmentName}}
      # WARNING: DO NOT DO THIS IN PRODUCTION! Huge security vulnerability, but necessary to use tSQLt. Only use in Dev
      - task: PowerShell@2
        displayName: 'Setting up CLR on Dev DB...'
        inputs:
          targetType: filePath
          filePath: ${{parameters.setupCLRscript}}
          arguments: -servername 'localhost' -databaseName '${{parameters.databaseName}}-${{parameters.environmentName}}'
      - task: PowerShell@2
        displayName: 'Installing tSQLt on Dev DB...'
        inputs:
          targetType: filePath
          filePath: ${{parameters.installTSQLtScript}}
          arguments: -servername 'localhost' -databaseName '${{parameters.databaseName}}-${{parameters.environmentName}}'
      - task: PowerShell@2
        displayName: 'Creating Tests on Dev DB...'
        inputs:
          targetType: filePath
          filePath: ${{parameters.createTestsScript}}
          arguments: -servername 'localhost' -databaseName '${{parameters.databaseName}}-${{parameters.environmentName}}'
      - task: PowerShell@2
        displayName: 'Running Tests on Dev DB...'
        inputs:
          targetType: filePath
          filePath: ${{parameters.runTestsScript}}
          arguments: -servername 'localhost' -databaseName '${{parameters.databaseName}}-${{parameters.environmentName}}'
      - task: PowerShell@2
        displayName: 'Creating test results report...'
        condition: always() #Always generate report, otherwise we won't know which test failed
        inputs:
          targetType: filePath
          filePath: ${{parameters.createReportScript}}
          arguments: -servername 'localhost' -databaseName '${{parameters.databaseName}}-${{parameters.environmentName}}'
      # Copy files from source folder to target folder
      - task: CopyFiles@2
        inputs:
          # WARNING: Only the migrations folder should be copied. tSQLt and pipeline scripts are a security
          # vulnerability in a Production environment.

          # Excluding "ps", "sql" and "tests" folders (i.e. the ones that contain vulnerable tSQLt code)
          Contents: |
            **
            !**\ps\**
            !**\sql\**
            !**\tests\**
            ConsoleApplication1\readme.txt
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          #CleanTargetFolder: true
          OverWrite: true
      # Tests passed, so push the FlyWay migrations up the CI pipeline as a Build Artifact
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Migration Scripts as Build Artifact'
        inputs:
          artifactName: ${{parameters.databaseName}}
          targetPath: '$(Build.ArtifactStagingDirectory)'